{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "9b94c0552360fd39a72a27fbf2d6a549",
     "grade": false,
     "grade_id": "cell-4987257505ec9884",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### WARNING\n",
    "Please refrain from using **print statements/anything that dumps large outputs(>500 lines) to STDOUT** to avoid running to into **memory issues**. \n",
    "Doing so requires your entire lab to be reset which may also result in loss of progress and you will be required to reach out to Coursera for assistance with this.\n",
    "This process usually takes time causing delays to your submission."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "7b8938a1b09f02ca333311638e75dc1b",
     "grade": false,
     "grade_id": "cell-77449491740be285",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### Validate Button\n",
    "Please note that this assignment uses nbgrader to facilitate grading. You will see a **validate button** at the top of your Jupyter notebook. If you hit this button, it will run tests cases for the lab that aren't hidden. It is good to use the validate button before submitting the lab. Do know that the labs in the course contain hidden test cases. The validate button will not let you know whether these test cases pass. After submitting your lab, you can see more information about these hidden test cases in the Grader Output. <br>\n",
    "***Cells with longer execution times will cause the validate button to time out and freeze. Please know that if you run into Validate time-outs, it will not affect the final submission grading.*** <br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "5fcf04359e4f58318a4f49068f7ed7cc",
     "grade": false,
     "grade_id": "cell-e4b3b8e5dba94833",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import scipy as sp\n",
    "import scipy.stats as stats\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "# Set color map to have light blue background\n",
    "sns.set()\n",
    "import statsmodels.formula.api as smf\n",
    "import statsmodels.api as sm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "5321ddafe1d106af0ce1198bbe0bf5b1",
     "grade": false,
     "grade_id": "cell-9053db523658abe7",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "N.B.: I recommend that you use the `statsmodel` library to do the regression analysis as opposed to *e.g.* `sklearn`. The `sklearn` library is great for advanced topics, but it's easier to get lost in a sea of details and it's not needed for these problems."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "941726f345e5985f9de17219118382c0",
     "grade": false,
     "grade_id": "cell-b1e4ef7d92635e96",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "# 1.  Polynomial regression using MPG data [25 pts, Peer Review]\n",
    "We will be using Auto MPG data from UCI datasets (https://archive.ics.uci.edu/ml/datasets/Auto+MPG) to study polynomial regression."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "99b68acb494ea289b6845d14c5621157",
     "grade": false,
     "grade_id": "cell-6ab9f7cc3182ff00",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 398 entries, 0 to 397\n",
      "Data columns (total 9 columns):\n",
      " #   Column        Non-Null Count  Dtype  \n",
      "---  ------        --------------  -----  \n",
      " 0   mpg           398 non-null    float64\n",
      " 1   cylinders     398 non-null    int64  \n",
      " 2   displacement  398 non-null    float64\n",
      " 3   horsepower    398 non-null    object \n",
      " 4   weight        398 non-null    float64\n",
      " 5   acceleration  398 non-null    float64\n",
      " 6   model_year    398 non-null    int64  \n",
      " 7   origin        398 non-null    int64  \n",
      " 8   car_name      398 non-null    object \n",
      "dtypes: float64(4), int64(3), object(2)\n",
      "memory usage: 28.1+ KB\n",
      "None\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mpg</th>\n",
       "      <th>cylinders</th>\n",
       "      <th>displacement</th>\n",
       "      <th>weight</th>\n",
       "      <th>acceleration</th>\n",
       "      <th>model_year</th>\n",
       "      <th>origin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>398.000000</td>\n",
       "      <td>398.000000</td>\n",
       "      <td>398.000000</td>\n",
       "      <td>398.000000</td>\n",
       "      <td>398.000000</td>\n",
       "      <td>398.000000</td>\n",
       "      <td>398.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>23.514573</td>\n",
       "      <td>5.454774</td>\n",
       "      <td>193.425879</td>\n",
       "      <td>2970.424623</td>\n",
       "      <td>15.568090</td>\n",
       "      <td>76.010050</td>\n",
       "      <td>1.572864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>7.815984</td>\n",
       "      <td>1.701004</td>\n",
       "      <td>104.269838</td>\n",
       "      <td>846.841774</td>\n",
       "      <td>2.757689</td>\n",
       "      <td>3.697627</td>\n",
       "      <td>0.802055</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>9.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>68.000000</td>\n",
       "      <td>1613.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>17.500000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>104.250000</td>\n",
       "      <td>2223.750000</td>\n",
       "      <td>13.825000</td>\n",
       "      <td>73.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>23.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>148.500000</td>\n",
       "      <td>2803.500000</td>\n",
       "      <td>15.500000</td>\n",
       "      <td>76.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>29.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>262.000000</td>\n",
       "      <td>3608.000000</td>\n",
       "      <td>17.175000</td>\n",
       "      <td>79.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>46.600000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>455.000000</td>\n",
       "      <td>5140.000000</td>\n",
       "      <td>24.800000</td>\n",
       "      <td>82.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              mpg   cylinders  displacement       weight  acceleration  \\\n",
       "count  398.000000  398.000000    398.000000   398.000000    398.000000   \n",
       "mean    23.514573    5.454774    193.425879  2970.424623     15.568090   \n",
       "std      7.815984    1.701004    104.269838   846.841774      2.757689   \n",
       "min      9.000000    3.000000     68.000000  1613.000000      8.000000   \n",
       "25%     17.500000    4.000000    104.250000  2223.750000     13.825000   \n",
       "50%     23.000000    4.000000    148.500000  2803.500000     15.500000   \n",
       "75%     29.000000    8.000000    262.000000  3608.000000     17.175000   \n",
       "max     46.600000    8.000000    455.000000  5140.000000     24.800000   \n",
       "\n",
       "       model_year      origin  \n",
       "count  398.000000  398.000000  \n",
       "mean    76.010050    1.572864  \n",
       "std      3.697627    0.802055  \n",
       "min     70.000000    1.000000  \n",
       "25%     73.000000    1.000000  \n",
       "50%     76.000000    1.000000  \n",
       "75%     79.000000    2.000000  \n",
       "max     82.000000    3.000000  "
      ]
     },
     "execution_count": 198,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "columns = ['mpg','cylinders','displacement','horsepower','weight','acceleration','model_year','origin','car_name']\n",
    "df = pd.read_csv(\"data/auto-mpg.data\", header=None, delimiter=r\"\\s+\", names=columns) \n",
    "print(df.info())\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "d66e4cc0322f58a9600526aad669d932",
     "grade": false,
     "grade_id": "cell-0970d31c4644246a",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### 1a) Clean the data [5 pts] \n",
    "\n",
    "1. Fix data types\n",
    "2. Remove null or undefined values \n",
    "3. Drop the column car_name\n",
    "\n",
    "Replace the data frame with the cleaned data frame. Do not change the column names, and do not add new columns.\n",
    "\n",
    "Hint: 1. Dtype of one column is incorrect.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "3d3715f95049cdf5a98cf782436c42d0",
     "grade": false,
     "grade_id": "cell-62afc4802962eabb",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# replace data frame with cleaned data frame\n",
    "# fix data types, remove null or undefined values, drop the column car_name\n",
    "# NOTE: do not change the column names or add new columns \n",
    "# your code here\n",
    "pd.set_option(\"display.max.row\", None)\n",
    "df=df.drop(df[df['horsepower']=='?'].index)\n",
    "df=df.drop('car_name',axis=1)\n",
    "df = df.astype(float)\n",
    "df.reset_index(inplace=True)\n",
    "df=df.drop('index',axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "b73dab50aa3325ac620f85bd856bc662",
     "grade": true,
     "grade_id": "cell-3bb1f13b2e888fa2",
     "locked": true,
     "points": 5,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# this cell will test that you properly cleaned the dataframe "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "3c568a653610a889a8f07e47b03f9c17",
     "grade": false,
     "grade_id": "cell-cae84acc6222fae0",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### 1b) Fit a simple linear regression model with a feature that maximizes $R^2$. [5 pts]\n",
    "Which feature is the best predictor, and the resulting r-squared value? Update your answer below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "85cafbf2b087159b9395f8c00b78d365",
     "grade": false,
     "grade_id": "cell-95afec916a05fed8",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# your code here\n",
    "#acceleration\tmodel_year0.337\torigin0.319\n",
    "#df.corr()\n",
    "#df1=df[['mpg','weight']].dropna()\n",
    "#model =smf.ols(formula='mpg ~ weight', data=df1).fit()\n",
    "#print(model.summary())\n",
    "best_predictor='weight'\n",
    "best_r_squared=0.693"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "17ae5a597735e5ef5199487fa27c7e43",
     "grade": true,
     "grade_id": "cell-a0a1c4e81af87837",
     "locked": true,
     "points": 5,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# this cell will test best_predictor and best_r_squared"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "03507eba7d8f7b250feb4379aacc2822",
     "grade": false,
     "grade_id": "cell-9decb69047193e5b",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### 1c) Using the feature found above (without normalizing), fit polynomial regression up to N=10 and report $R^2$. Which polynomial degree gives the best result? [10 pts]\n",
    "Hint: For N-degree polynomial fit, **you have to include all orders upto N**. Use a for loop instead of running it manually. The `statsmodels.formula.api` formula string can understand **`np.power(x,n)`** function to include a feature representing $x^n$.\n",
    "\n",
    "For example, the formula for n = 4 ---> mpg ~ weight + np.power(weight,2) + np.power(weight,3) + np.power(weight,4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "5eff5fe01be3ea4606103764c9baf7b0",
     "grade": false,
     "grade_id": "cell-006f7fbcfed58b23",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# return updated best_degree and best_r_squared \n",
    "best_degree = 3\n",
    "best_r_squared = 0.7151495\n",
    "# your code here\n",
    "#df1=df[['mpg',best_predictor]]\n",
    "#train_x=df[best_predictor]\n",
    "#r2_values=[]\n",
    "#for i in range(1,11):\n",
    "#    formula = 'mpg ~ ' + ' + '.join(['np.power(weight, {})'.format(j) for j in range(1,i+1)])\n",
    "#    model = smf.ols(formula, data=df1).fit()\n",
    "#    r2_values.append(model.rsquared)\n",
    "#print(r2_values)\n",
    "#print(model.summary()) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "d77794138a992b7fac1bd43440657795",
     "grade": true,
     "grade_id": "cell-f1eadefb34bd33c2",
     "locked": true,
     "points": 10,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# this cell tests best_degree and best_r_squared "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "77322bb635e2ba9cc3f27a382fede78f",
     "grade": false,
     "grade_id": "cell-b7b1be7a931d2728",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### 1d) Now, let's make a new feature called 'weight_norm' which is weight normalized by the mean value. [5 pts]\n",
    "Run training with polynomial models with polynomial degrees up to 20. Print out each polynomial degree and $R^2$ value. What do you observe from the result? What are the best_degree and best_r_qaured just based on $R^2$ value?\n",
    "Inspect model summary from each model. What is the highest order model that makes sense (fill the value for the sound_degree)? \n",
    "\n",
    "Note: For N-degree polynomial fit, you have to include all orders upto N."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "9f8eb6a5bea83f6fd4f455ab5423fa8f",
     "grade": false,
     "grade_id": "cell-6b06ce4c2b694439",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                    mpg   R-squared:                       0.715\n",
      "Model:                            OLS   Adj. R-squared:                  0.713\n",
      "Method:                 Least Squares   F-statistic:                     324.7\n",
      "Date:                Fri, 05 Apr 2024   Prob (F-statistic):          2.09e-105\n",
      "Time:                        13:10:00   Log-Likelihood:                -1115.1\n",
      "No. Observations:                 392   AIC:                             2238.\n",
      "Df Residuals:                     388   BIC:                             2254.\n",
      "Df Model:                           3                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "============================================================================================\n",
      "                               coef    std err          t      P>|t|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------------------\n",
      "Intercept                   61.6952     11.043      5.587      0.000      39.984      83.407\n",
      "np.power(weight_norm, 1)   -53.3874     32.500     -1.643      0.101    -117.285      10.510\n",
      "np.power(weight_norm, 2)    13.4357     30.592      0.439      0.661     -46.710      73.582\n",
      "np.power(weight_norm, 3)     0.4874      9.247      0.053      0.958     -17.692      18.667\n",
      "==============================================================================\n",
      "Omnibus:                       53.711   Durbin-Watson:                   0.770\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               93.724\n",
      "Skew:                           0.808   Prob(JB):                     4.45e-21\n",
      "Kurtosis:                       4.768   Cond. No.                         540.\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "best_degree = 20\n",
    "best_r_squared = 0.7245\n",
    "sound_degree = 2\n",
    "\n",
    "df['weight_norm'] = df['weight']/df['weight'].mean()\n",
    "#your code here\n",
    "df1=df[['mpg','weight_norm']].dropna()\n",
    "formula = 'mpg ~ ' + ' + '.join(['np.power(weight_norm, {})'.format(j) for j in range(1,4)])\n",
    "model = smf.ols(formula, data=df).fit()\n",
    "print(model.summary()) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "04aa0d5c7219e7b75c5c2c40f6977f25",
     "grade": true,
     "grade_id": "cell-9e5cf0218fc7223e",
     "locked": true,
     "points": 5,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# tests best_degree, best_r_squared, and sound_degree"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "b3a40a495119e5f20a1f1a5d71cd9a5a",
     "grade": false,
     "grade_id": "cell-6a0c0f990a4d625c",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### TODO: \n",
    "Open the Peer Review assignment for this week to answer a question for section 1d. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "bcdeca2ee3a270b46760bb39695fcfab",
     "grade": false,
     "grade_id": "cell-e8cf71ca601f0306",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "# 2. Multi-Linear Regression [15 pts, Peer Review]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "bb6ec556f086d3c6ce58fe22f538f691",
     "grade": false,
     "grade_id": "cell-e9eaa96657b9c0dd",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "In the following problem, you will construct a simple multi-linear regression model, identify interaction terms and use diagnostic plots to identify outliers in the data. The original problem is as described by John Verzani in the [excellent tutorial 'SimplR' on the R statistics language](https://cran.r-project.org/doc/contrib/Verzani-SimpleR.pdf) and uses data from the 2000 presidential election in Florida. The problem is interesting because it contains a small number of highly leveraged points that influence the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "650e938a68d060bacf43eadb71c05f76",
     "grade": false,
     "grade_id": "cell-3c062b1300f9a41e",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>county</th>\n",
       "      <th>Bush</th>\n",
       "      <th>Gore</th>\n",
       "      <th>Nader</th>\n",
       "      <th>Buchanan</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>67</td>\n",
       "      <td>67.000000</td>\n",
       "      <td>67.000000</td>\n",
       "      <td>67.000000</td>\n",
       "      <td>67.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>67</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Hernando</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>NaN</td>\n",
       "      <td>43450.970149</td>\n",
       "      <td>43453.985075</td>\n",
       "      <td>1454.119403</td>\n",
       "      <td>260.880597</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>NaN</td>\n",
       "      <td>57182.620266</td>\n",
       "      <td>75070.435056</td>\n",
       "      <td>2033.620972</td>\n",
       "      <td>450.498092</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>NaN</td>\n",
       "      <td>1317.000000</td>\n",
       "      <td>789.000000</td>\n",
       "      <td>19.000000</td>\n",
       "      <td>9.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4757.000000</td>\n",
       "      <td>3058.000000</td>\n",
       "      <td>95.500000</td>\n",
       "      <td>46.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>20206.000000</td>\n",
       "      <td>14167.000000</td>\n",
       "      <td>562.000000</td>\n",
       "      <td>120.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>56546.500000</td>\n",
       "      <td>46015.000000</td>\n",
       "      <td>1870.500000</td>\n",
       "      <td>285.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>NaN</td>\n",
       "      <td>289533.000000</td>\n",
       "      <td>387703.000000</td>\n",
       "      <td>10022.000000</td>\n",
       "      <td>3411.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          county           Bush           Gore         Nader     Buchanan\n",
       "count         67      67.000000      67.000000     67.000000    67.000000\n",
       "unique        67            NaN            NaN           NaN          NaN\n",
       "top     Hernando            NaN            NaN           NaN          NaN\n",
       "freq           1            NaN            NaN           NaN          NaN\n",
       "mean         NaN   43450.970149   43453.985075   1454.119403   260.880597\n",
       "std          NaN   57182.620266   75070.435056   2033.620972   450.498092\n",
       "min          NaN    1317.000000     789.000000     19.000000     9.000000\n",
       "25%          NaN    4757.000000    3058.000000     95.500000    46.500000\n",
       "50%          NaN   20206.000000   14167.000000    562.000000   120.000000\n",
       "75%          NaN   56546.500000   46015.000000   1870.500000   285.500000\n",
       "max          NaN  289533.000000  387703.000000  10022.000000  3411.000000"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "votes = pd.read_csv('data/fl2000.txt', delim_whitespace=True, comment='#')\n",
    "votes = votes[['county', 'Bush', 'Gore', 'Nader', 'Buchanan']]\n",
    "votes.describe(include='all')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "ac095a5f66f36f290efc3daa77753f1d",
     "grade": false,
     "grade_id": "cell-34a57617922dd7b2",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### 2a. Plot a pair plot of the data using the `seaborn` library. [Peer Review]\n",
    "Upload a screenshot or saved copy of your plot for this week's Peer Review assignment.<br>\n",
    "**Note:** your code for this section may cause the Validate button to time out. If you want to run the Validate button prior to submitting, you could comment out the code in this section after completing the Peer Review."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "4580e4653feab570c9b0fa3db7ba3444",
     "grade": false,
     "grade_id": "cell-6295591c65139c70",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Bush</th>\n",
       "      <th>Gore</th>\n",
       "      <th>Nader</th>\n",
       "      <th>Buchanan</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Bush</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.912652</td>\n",
       "      <td>0.892249</td>\n",
       "      <td>0.625185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gore</th>\n",
       "      <td>0.912652</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.864378</td>\n",
       "      <td>0.691314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nader</th>\n",
       "      <td>0.892249</td>\n",
       "      <td>0.864378</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.654215</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Buchanan</th>\n",
       "      <td>0.625185</td>\n",
       "      <td>0.691314</td>\n",
       "      <td>0.654215</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Bush      Gore     Nader  Buchanan\n",
       "Bush      1.000000  0.912652  0.892249  0.625185\n",
       "Gore      0.912652  1.000000  0.864378  0.691314\n",
       "Nader     0.892249  0.864378  1.000000  0.654215\n",
       "Buchanan  0.625185  0.691314  0.654215  1.000000"
      ]
     },
     "execution_count": 253,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# plot a pair plot of the data using the seaborn library\n",
    "# possible way to save the image\n",
    "# plt.savefig('pair_plot.png', dpi = 300, bbox_inches = 'tight')\n",
    "# your code here\n",
    "#sns.pairplot(votes)\n",
    "votes.corr()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "77eba6c741c09bd255b273a9f3d77519",
     "grade": false,
     "grade_id": "cell-b72a220a013a11eb",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### 2b. Comment on the relationship between the quantiative datasets. Are they correlated? Collinear? [Peer Review]\n",
    "You will answer this question in this week's Peer Review assignment."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "0ce62030747239510e2a7f5e6537bb6e",
     "grade": false,
     "grade_id": "cell-27c84c69998660fd",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### 2c. Multi-linear [5 pts, Peer Review]\n",
    "\n",
    "Construct a multi-linear model called `model` without interaction terms predicting the Bush column on the other columns and print out the summary table. You should name your model's object as `model` in order to pass the autograder. Use the full data (not train-test split for now) and do not scale features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "f1f04143151d86d74cce9f60e1b84c2e",
     "grade": false,
     "grade_id": "cell-3e217b35eef74be5",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                   Bush   R-squared:                       0.877\n",
      "Model:                            OLS   Adj. R-squared:                  0.871\n",
      "Method:                 Least Squares   F-statistic:                     149.5\n",
      "Date:                Fri, 05 Apr 2024   Prob (F-statistic):           1.35e-28\n",
      "Time:                        13:56:04   Log-Likelihood:                -758.33\n",
      "No. Observations:                  67   AIC:                             1525.\n",
      "Df Residuals:                      63   BIC:                             1533.\n",
      "Df Model:                           3                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept   8647.6837   3133.545      2.760      0.008    2385.793    1.49e+04\n",
      "Gore           0.4475      0.071      6.305      0.000       0.306       0.589\n",
      "Nader         11.8533      2.503      4.735      0.000       6.851      16.855\n",
      "Buchanan      -7.2033      7.864     -0.916      0.363     -22.917       8.511\n",
      "==============================================================================\n",
      "Omnibus:                       20.698   Durbin-Watson:                   1.969\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              128.017\n",
      "Skew:                           0.383   Prob(JB):                     1.59e-28\n",
      "Kurtosis:                       9.728   Cond. No.                     1.08e+05\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 1.08e+05. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "# uncomment and construct a multi-linear model \n",
    "\n",
    "# your code here\n",
    "votes1=votes[['Bush','Gore','Nader','Buchanan']]\n",
    "model=smf.ols(formula='Bush ~ Gore+Nader+Buchanan', data=votes1).fit()\n",
    "print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "5a50f4cd807b1853c12a678d548bcb88",
     "grade": true,
     "grade_id": "cell-0f446ca83e177241",
     "locked": true,
     "points": 3,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# tests model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "2ad4bc982aba8cbc23dbd612ccefe4e3",
     "grade": false,
     "grade_id": "cell-5ec540187e23c55b",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "Is there any insignificant feature(s)? Explain your answer in this week's Peer Review assignment. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "3716f4db7d6130148683606b82775b62",
     "grade": false,
     "grade_id": "cell-91b57f0a9964a836",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### 2d. Multi-linear with interactions [Peer Review]\n",
    "\n",
    "Construct a multi-linear model with interactions that are statistically significant at the $p = 0.05$ level. You can start with full interactions and then eliminate interactions that do not meet the $p = 0.05$ threshold. You will share your solution in this week's Peer Review assignment. \n",
    "\n",
    "Note: Name this model object as **`model_multi`**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "7aaee7a000ff2b1f1692f0a2384934ca",
     "grade": false,
     "grade_id": "cell-22c0b20ec31ac9c9",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# uncomment and construct multi-linear model \n",
    "# your code here\n",
    "votes1=votes[['Bush','Gore','Nader','Buchanan']]\n",
    "model_multi=smf.ols(formula='Bush ~ Gore+Nader*Buchanan', data=votes1).fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "397523e7e29f6c551cbeba67df1a5f7c",
     "grade": true,
     "grade_id": "cell-eb632c2993a3a21e",
     "locked": true,
     "points": 5,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# tests model_multi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "ec85a9f2a7e62c09573b60c001b95905",
     "grade": false,
     "grade_id": "cell-07dd7f2ef51e935d",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                   Bush   R-squared:                       0.910\n",
      "Model:                            OLS   Adj. R-squared:                  0.904\n",
      "Method:                 Least Squares   F-statistic:                     155.9\n",
      "Date:                Fri, 05 Apr 2024   Prob (F-statistic):           1.30e-31\n",
      "Time:                        14:10:08   Log-Likelihood:                -747.99\n",
      "No. Observations:                  67   AIC:                             1506.\n",
      "Df Residuals:                      62   BIC:                             1517.\n",
      "Df Model:                           4                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==================================================================================\n",
      "                     coef    std err          t      P>|t|      [0.025      0.975]\n",
      "----------------------------------------------------------------------------------\n",
      "Intercept      -1980.5222   3516.613     -0.563      0.575   -9010.132    5049.088\n",
      "Gore               0.4302      0.061      7.004      0.000       0.307       0.553\n",
      "Nader             16.2123      2.350      6.898      0.000      11.514      20.910\n",
      "Buchanan          64.4286     16.584      3.885      0.000      31.278      97.580\n",
      "Nader:Buchanan    -0.0141      0.003     -4.735      0.000      -0.020      -0.008\n",
      "==============================================================================\n",
      "Omnibus:                       21.432   Durbin-Watson:                   1.966\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              177.985\n",
      "Skew:                          -0.152   Prob(JB):                     2.24e-39\n",
      "Kurtosis:                      10.979   Cond. No.                     4.74e+06\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 4.74e+06. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "# tests model_multi \n",
    "# your code here\n",
    "print(model_multi.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "bc78817205e93cacf8ea393d590ed6f3",
     "grade": false,
     "grade_id": "cell-b98112cfec169f01",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### 2e. Leverage [Peer Review]\n",
    "\n",
    "Plot the *leverage* vs. the square of the residual.\n",
    "\n",
    "These resources might be helpful    \n",
    "- https://rpubs.com/Amrabdelhamed611/669768\n",
    "- https://www.statsmodels.org/dev/generated/statsmodels.graphics.regressionplots.plot_leverage_resid2.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "ea95ea232eeea5861a9228d0362fee40",
     "grade": false,
     "grade_id": "cell-ef11baefdcff42ae",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot the leverage vs. the square of the residual\n",
    "# your code here\n",
    "votes1=votes[['Bush','Gore','Nader']]\n",
    "results = smf.ols('Bush ~ Gore + Nader',data=votes1).fit()\n",
    "sm.graphics.plot_leverage_resid2(results)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "4ffc57759fcc7aaa641d4c9f29792a01",
     "grade": false,
     "grade_id": "cell-ee3769e1988a26ba",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# you can use this cell to try different plots \n",
    "# your code here\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "a1109f70cd913c619846729dbaea6dc2",
     "grade": false,
     "grade_id": "cell-0de43916d160a061",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "Upload your plot for this week's Peer Review assignment. If you tried out multiple models, upload a single model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "4f2ab521eca2939f6be06b0324812089",
     "grade": false,
     "grade_id": "cell-36cc68329e51f35e",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### 2f. Identify and Clean [5pts]\n",
    "\n",
    "The leverage *vs* residual plot indicates that some rows have high leverage but small residuals and others have high residual. The $R^2$ of the model is determined by the residual. The data is from the disputed 2000 election [where one county](https://en.wikipedia.org/wiki/2000_United_States_presidential_election_recount_in_Florida) caused significant issues.\n",
    "\n",
    "Display the *3 or more* rows for the points indicated having high leverage and/or high residual squared. You will use this to improve the model $R^2$.\n",
    "\n",
    "Name the list of indices for those high-leverage and/or high-residual points as `unusual`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "49583c6c1bd160606c55538ed81cda65",
     "grade": false,
     "grade_id": "cell-86a3970d8f212d25",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# uncomment and fill unusual with list of indices for high-leverage and/or high-residual points\n",
    "\n",
    "# your code here\n",
    "unusual = [5,42,14,51,27,49]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "8640ed3902ec093d908ae2a9e59d564b",
     "grade": true,
     "grade_id": "cell-371a2f9390cc1bac",
     "locked": true,
     "points": 5,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# tests your list of indices for high-leverage and/or high-residual points "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "20911234c5ee4bb73c6f0162a584c89b",
     "grade": false,
     "grade_id": "cell-92e61512d63f64b4",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### 2g. Final model [5 pts]\n",
    "\n",
    "Develop your final model by dropping *one or more* of the troublesome data points indicated in the leverage *vs* residual plot and insuring any interactions in your model are still significant at $p=0.05$. Your model should have an $R^2$ great than 0.95. Call your model `model_final`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "cee47438644e06f44f3855e40d2aa42f",
     "grade": false,
     "grade_id": "cell-e44af38914a74eca",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                   Bush   R-squared:                       0.958\n",
      "Model:                            OLS   Adj. R-squared:                  0.957\n",
      "Method:                 Least Squares   F-statistic:                     709.1\n",
      "Date:                Fri, 05 Apr 2024   Prob (F-statistic):           1.92e-43\n",
      "Time:                        13:25:56   Log-Likelihood:                -696.58\n",
      "No. Observations:                  65   AIC:                             1399.\n",
      "Df Residuals:                      62   BIC:                             1406.\n",
      "Df Model:                           2                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept   2116.3984   1941.044      1.090      0.280   -1763.694    5996.491\n",
      "Gore           0.7784      0.042     18.508      0.000       0.694       0.862\n",
      "Buchanan      51.8526     10.825      4.790      0.000      30.213      73.492\n",
      "==============================================================================\n",
      "Omnibus:                       11.376   Durbin-Watson:                   1.709\n",
      "Prob(Omnibus):                  0.003   Jarque-Bera (JB):               15.108\n",
      "Skew:                           0.678   Prob(JB):                     0.000524\n",
      "Kurtosis:                       4.933   Cond. No.                     9.12e+04\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 9.12e+04. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "# develop your model_final here\n",
    "# model_final = \n",
    "# your code here\n",
    "votes1=votes[['Bush','Gore','Buchanan']]\n",
    "votes1=votes1.drop([5,49])\n",
    "model_final=smf.ols(formula='Bush ~ Gore+Buchanan', data=votes1).fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "0998aa6a3e2d69f7c3f8860187436a84",
     "grade": true,
     "grade_id": "cell-9020c6d93ec1e5ff",
     "locked": true,
     "points": 5,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# tests model_final"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "ba3301db38167d7f5d60a9ad16e9f3bf",
     "grade": false,
     "grade_id": "cell-aaa41e66895bed82",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "\n",
    "## 3. Body Mass Index Model [20 points, Peer Review]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "d34d6b307eda25bb4b005ddaaeffeb92",
     "grade": false,
     "grade_id": "cell-e0a612fa6afff5b7",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "In this problem, you will first clean a data set and create a model to estimate body fat based on the common BMI measure. Then, you will use the **forward stepwise selection** method to create more accurate predictors for body fat.\n",
    "\n",
    "The body density dataset in file `bodyfat` includes the following 15 variables listed from left to right:\n",
    "* Density : Density determined from underwater weighing\n",
    "* Fat : Percent body fat from Siri’s (1956) equation\n",
    "* Age : Age (years)\n",
    "* Weight : Weight (kg)\n",
    "* Height : Height (cm)\n",
    "* Neck : Neck circumference (cm)\n",
    "* Chest: Chest circumference (cm)\n",
    "* Abdomen : Abdomen circumference (cm)\n",
    "* Hip : Hip circumference (cm)\n",
    "* Thigh : Thigh circumference (cm)\n",
    "* Knee : Knee circumference (cm)\n",
    "* Ankle : Ankle circumference (cm)\n",
    "* Biceps : Biceps (extended) circumference (cm)\n",
    "* Forearm : Forearm circumference (cm)\n",
    "* Wrist : Wrist circumference (cm)\n",
    "\n",
    "The `Density` column is the \"gold standard\" -- it is a measure of body density obtained by dunking people in water and measuring the displacement. The `Fat` column is a prediction using another statistical model. The body mass index (BMI) is [calculated as Kg/m^2](https://en.wikipedia.org/wiki/Body_mass_index) and is used to classify people into different weight categories with a [BMI over 30 being 'obese'](https://www.medicalnewstoday.com/info/obesity). You will find that BMI is a poor predictor of the `Density` information it purports to predict. You will try to find better models using measurements and regression.\n",
    "\n",
    "Unfortunately for us, the dataset we have has imperial units for weight and height, so we will convert those to metric and then calculate the BMI and plot the KDE of the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "abbebf927df5eeb0b1be132a5eb82741",
     "grade": false,
     "grade_id": "cell-c1702a843e3fb544",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZYAAAD7CAYAAABJ5bKmAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+j8jraAAAgAElEQVR4nO3df3Bc5X3v8ffuan/op2UJSV4hE4pLjNrYJQMkFy4ZEpAtEQRyOzVqDExoLqZNffEMTQLGpbZlOqSm7SUE7GRKpyYUJvXoJsWWaozjuA3xJEAvJDZBQFJHRhitJVuy0G/t7tlz/1jtGv1eSeestIfPa/Ag7Z49+zw6sj/7fZ5znuMyTdNERETEIu6FboCIiDiLgkVERCylYBEREUspWERExFIKFhERsZSCRURELKVgERERS2UtdAPS6fz5AWIx6y7bKS7Oo6ur37L9LTQn9cdJfQFn9cdJfQFn98ftdrF0ae6s9/GxCpZYzLQ0WBL7dBIn9cdJfQFn9cdJfQH1ZzwNhYmIiKUULCIiYikFi4iIWErBIiIillKwiIiIpRQsIiJiKQWLpE3Tz07xvx9/mY7uwYVuiojYSMEiaXPo1TYGR6K89nbHQjdFRGykYJG0GBiOMDQSBaCtwzlXKYvIRAoWSYtQV3z4y+N20d41sMCtERE7KVgkLXr6RgBYUV5AT//IArdGROykYJG0+HAgDMClwQKGRgyGw9EFbpGI2EXBImnR0z+Cx+1ieWkeAOf7VLWIOJWCRdKip2+EglwfRfn+5Pci4kwKFkmLnoEwhXl+ChPB0h9e4BaJiF0ULJIWH/aHWZLrozBvNFgGVLGIOJWCRdJicCRCbnYWAZ8Hj9vF4LAm70WcSsEiaTEwHCU34MXlcpEbyGJgKLLQTRIRmyhYxHZRI8ZI2CDHH78Tdm62l35VLCKOpWAR2w2OLuWSExgNloBXFYuIgylYxHZDo9VJbsA7+v8sBoYVLCJOlbZgaW1tpb6+nurqaurr6zl16tSEbQzDoKGhgaqqKtasWUNjY2Pyua6uLu69915uvfVWampq2LFjB9GohlMywcDwuIol28vAkI6diFOlLVi2b9/Ohg0beOmll9iwYQPbtm2bsE1TUxNtbW0cPnyYffv28eSTT3L69GkAvvvd77JixQqamppoamrirbfe4vDhw+lqvszD4Gh1MmYoTBWLiGOlJVi6urpoaWmhtrYWgNraWlpaWuju7h6z3cGDB1m/fj1ut5uioiKqqqo4dOgQAC6Xi4GBAWKxGOFwmEgkQllZWTqaL/N0YY5ldCgsO4vhsEHUiC1ks0TEJlnpeJNQKERZWRkejwcAj8dDaWkpoVCIoqKiMduVl5cnvw8Gg5w5cwaAv/iLv+C+++7j+uuvZ2hoiDvuuIOrrrpqVu0oLs6zoDdjlZTkW77PhWRHf9y/OQfAJRcXUlQQoHT0OOTmZ1OQ67P8/RJ0bBYvJ/UF1J/x0hIsVjh06BArV67ke9/7HgMDA2zcuJFDhw5RU1OT8j66uvqJxUzL2lRSks/Zs32W7W+h2dWfs93x+68M9g1jjEQwIvEK5nR7DyWF2Za/H+jYLGZO6gs4uz9ut2tOH8jTMhQWDAbp6OjAMAwgPknf2dlJMBicsF17e3vy+1AoxLJlywB47rnnuO2223C73eTn53PjjTfy6quvpqP5Mk8jYQMX4PXGf90CvnjlmrijpIg4S1qCpbi4mMrKSpqbmwFobm6msrJyzDAYQE1NDY2NjcRiMbq7uzly5AjV1dUAVFRU8PLLLwMQDof5+c9/zuWXX56O5ss8DYcNfD4PbpcLgMDohZLDYWMhmyUiNknbWWE7duzgueeeo7q6mueee46GhgYANm7cyJtvvglAXV0dFRUVrF27lttvv51NmzaxfPlyALZu3crrr7/Orbfeyrp167j00ku5/fbb09V8mYfhsEHA60l+n+1LBIsqFhEnStscy4oVK8Zcl5Lw9NNPJ7/2eDzJwBnvkksuYe/evba1T+wzEjHw+z4SLP7EUJgqFhEn0pX3YruRsJGcVwEIjFYsQ6pYRBxJwSK2Gw5HxwyFJUJmWBWLiCMpWMR28aGwC6Oufp8HF5pjEXEqBYvYbjg8do7F7XIR8Hs0xyLiUAoWsd34s8IgPs+iORYRZ1KwiO3GT95DfJ5F17GIOJOCRWxlmuaE040Bsv1ZDOvKexFHUrCIraJGDCNmTlqxaChMxJkULGKrxHCXf9wcS7YvS0NhIg6lYBFbjSSCZXzF4vdoKEzEoRQsYqvhSDxYAr6xqwdl+7IY1OnGIo6kYBFbJYa7xs+x+H0ewhED07Tu/jgisjgoWMRWI1PMsfi9HoyYSdRQsIg4jYJFbDXV5H3i+5GIhsNEnEbBIrYKRyefvE98H1awiDiOgkVslQgOX9bYX7VExaJTjkWcR8EitgpHYgD4NBQm8rGhYBFbJYbCJlQsGgoTcSwFi9gqUbF4pxgKU8Ui4jwKFrFVJBrDl+XG5XKNedzvjf/qaY5FxHkULGKrkagxYX4FVLGIOJmCRWwVicQmDIPBR+dYYulukojYTMEitgqrYhH52FGwiK3CkRj+SSoWb5YbF5pjEXEiBYvYKhw18Hon/pq5XK7kQpQi4iwKFrFVOBLDlzVxKAziw2EaChNxHgWL2CocNSZcHJng93qSqx+LiHMoWMRW4Uhs0sl7iC/zoopFxHkULGKryDQVS8CnYBFxIgWL2GpkmorF73UrWEQcSMEitopfxzL5r5lPcywijqRgEduYpjl65f0UFYuGwkQcScEitokaMUwuLDg5XsDrYURLuog4joJFbBOOJpbMn+asMA2FiTiOgkVsc+HukVNfxxKOGJimmc5miYjNFCxim6nuHpkQ8HkwuVDZiIgzpC1YWltbqa+vp7q6mvr6ek6dOjVhG8MwaGhooKqqijVr1tDY2Djm+YMHD3LrrbdSW1vLrbfeyrlz59LUepmLZMUyzVAYaIVjEafJStcbbd++nQ0bNlBXV8f+/fvZtm0bzz777JhtmpqaaGtr4/Dhw/T09LBu3TquvfZaKioqePPNN3nqqaf43ve+R0lJCX19ffh8vnQ1X+YgscDk1NexjAZL2ICctDVLRGyWloqlq6uLlpYWamtrAaitraWlpYXu7u4x2x08eJD169fjdrspKiqiqqqKQ4cOAfDMM8/wla98hZKSEgDy8/Px+/3paL7MUWKIa8q1wnyqWEScKC0VSygUoqysDI8n/g+Jx+OhtLSUUChEUVHRmO3Ky8uT3weDQc6cOQPAyZMnqaio4I477mBwcJA1a9bw1a9+dcK91KdTXJxnUY8uKCnJt3yfC8nK/pw6OwBAWWn+pPstPTcIQE6u35afo47N4uWkvoD6M17ahsLmyzAM3n33Xfbu3Us4HOaee+6hvLycdevWpbyPrq5+YjHrzkAqKcnn7Nk+y/a30Kzuz7mueLAM9A1Put/hwREAznT2UZTjtex9QcdmMXNSX8DZ/XG7XXP6QJ6WobBgMEhHRweGER/yMAyDzs5OgsHghO3a29uT34dCIZYtWwZAeXk5NTU1+Hw+8vLyuOmmmzhx4kQ6mi9zNJKcY9FQmMjHSVqCpbi4mMrKSpqbmwFobm6msrJyzDAYQE1NDY2NjcRiMbq7uzly5AjV1dVAfF7m2LFjo8uERHjllVe44oor0tF8maPIDBdI6r73Is6UtqGwHTt2sGXLFvbs2UNBQQG7du0CYOPGjWzevJlVq1ZRV1fH8ePHWbt2LQCbNm1i+fLlANxyyy386le/4otf/CJut5vrr7+eP/7jP05X82UOEmeFTbWkSyJYwlrWRcRR0hYsK1asmHBdCsDTTz+d/Nrj8dDQ0DDp691uNw899BAPPfSQbW0Ua40kzgqb6nTj0aGwYS3rIuIouvJebBOJGrhc4HFPfuaehsJEnEnBIrZJ3JZ4qlPCszxuPG5XcshMRJxBwSK2CUdjU14cmeDXCscijqNgEduEI8aU64Ql+H0ehlWxiDiKgkVsE47GpryGJcE3unS+iDiHgkVsk0rFEtBQmIjjKFjENuGIMWPF4ve6dVaYiMMoWMQ2kRQm730+j4JFxGEULGKbkdHTjacT8HoY0ZX3Io6iYBHbRKIGXp1uLPKxo2AR28TPCpu+YtFQmIjzpBwsP/7xj4lGo3a2RRwmflZYChWLgkXEUVIOlieeeILrr7+enTt3cvz4cTvbJA6RSsUS8HqIRGOW3oBNRBZWysFy4MABnnnmGfx+P/fddx/V1dXs2bOH06dP29k+yVAx00ztrDAtRCniOLOaY7niiit48MEH+clPfsL27ds5dOgQa9as4Y477uDAgQPEYjq7R+IiMyyZn6C7SIo4z6zvx9LW1saBAwc4cOAALpeLzZs3EwwGef755zl8+DBPPfWUHe2UDJNYpmXmOZb48woWEedIOVief/559u/fz3vvvcfNN9/MY489xpVXXpl8vrq6muuuu86WRkrmSbli8cZ/BXXKsYhzpBwsL7/8Mn/6p3/KTTfdhM/nm/B8dnY2Tz75pKWNk8yVqEBmvI7FF39etycWcY6U51g+85nPcPPNN08Ilb179ya/vv76661rmWS0ZMUy07L5oxXNcESnsos4RcrBsnv37kkf/853vmNZY8Q5EhWIf8ZFKEcn78OqWEScYsahsJ///OcAGIbBK6+8gmleuN7g9OnT5Obm2tc6yVgj0dHJ+xTPCtM9WUScY8Zg+au/+isAwuEwW7duTT7ucrkoKSnh4Ycftq91krEioxVLKmuFAbqLpIiDzBgsR48eBeCBBx7gscces71B4gzhVCuW5FCYgkXEKVKeY1GoyGwk51hSrFg0FCbiHNNWLDfffDMvvvgiADfccAMul2vS7f7zP//T8oZJZktULN4ZKha324U3S3eRFHGSaYPlkUceSX79d3/3d7Y3RpwjUbHMdOU9xKsWzbGIOMe0wXL11Vcnv/7MZz5je2PEOS7MsaQSLG7CmmMRcYyU51j27t3L22+/DcAvf/lLPv/5z3PTTTfxi1/8wrbGSeYKR2J43C487hSCxZeloTARB0k5WJ555hkqKioA+Id/+Afuvvtu/vzP/5xHH33UtsZJ5gpHjBnPCEvwe926772Ig6QcLH19feTn59Pf38+7777LXXfdxfr162ltbbWzfZKhwinciyUhft97Leki4hQpL0IZDAZ54403+O///m+uvvpqPB4P/f39eDypfSqVj5dw1EhpfgXi17p82B+2uUUiki4pB8sDDzzA5s2b8fl8fPvb3wbgP/7jP1i1apVtjZPMFYnEZlyAMiHg89CpORYRx0g5WG644QaOHTs25rGamhpqamosb5RkvpFZViyavBdxjlndQbKvr4/W1lYGBgbGPH7ttdda2ijJfOFZVCzxORYFi4hTpBwsP/zhD9m5cyc5OTkEAoHk4y6Xix//+Me2NE4yVyRqkJvtTWnbgE8Vi4iTpBwsjz/+OE888QQ33HCDne0RhwhHYhTlp1ax+LwejJhJ1IiR5Un5REURWaRS/ltsGMa87hDZ2tpKfX091dXV1NfXc+rUqUnfo6GhgaqqKtasWUNjY+OEbX7729/yB3/wB+zatWvObRH7zeassOQKx6paRBwh5WDZuHEj3/nOd4jF5nYh2/bt29mwYQMvvfQSGzZsYNu2bRO2aWpqoq2tjcOHD7Nv3z6efPJJTp8+nXzeMAy2b99OVVXVnNog6ROOxPCmPMcS/zXUPIuIM6Q8FPbMM89w7tw5/umf/onCwsIxz820unFXVxctLS3s3bsXgNraWh555BG6u7spKipKbnfw4EHWr1+P2+2mqKiIqqoqDh06xD333APAP/7jP/L5z3+ewcFBBgcHU226LIBZVSw+VSwiTpJysMxndeNQKERZWVnyYkqPx0NpaSmhUGhMsIRCIcrLy5PfB4NBzpw5A8A777zDsWPHePbZZ9mzZ8+c2lFcnDfnPkylpCTf8n0uJKv6E4nGKCzITml/pcX9AOTkBSz9eerYLF5O6guoP+OlHCwLubpxJBLhr//6r/nmN785ryv9u7r6icVMy9pVUpLP2bN9lu1voVnVn6gRI2qYRCPRlPY3PBS/6v5MRy9L/Nas5KBjs3g5qS/g7P643a45fSBPOVjC4TC7d++mubmZnp4eXn/9dY4dO8apU6e48847p31tMBiko6MDwzDweDwYhkFnZyfBYHDCdu3t7axevRq4UMGcPXuWtrY27r33XgB6e3sxTZP+/v4x94yRxSESTdyLJfXrWAAtRCniEClP3j/66KP8+te/5u///u+Td5K8/PLL+f73vz/ja4uLi6msrKS5uRmA5uZmKisrxwyDQfxK/sbGRmKxGN3d3Rw5coTq6mrKy8t59dVXOXr0KEePHuXLX/4yt99+u0JlkQongmWWcyy6PbGIM6RcsRw5coTDhw+Tk5ODe/QeG2VlZXR0dKT0+h07drBlyxb27NlDQUFB8nThjRs3snnzZlatWkVdXR3Hjx9n7dq1AGzatInly5fPtk+ywBIBMfuKRcEi4gQpB4vX68Uwxv7F7+7unnCG2FRWrFgx6XUpTz/9dPJrj8dDQ0PDjPu67777UnpPWRizrlhGg2VYpxuLOELKQ2E1NTU8+OCDvP/++wB0dnayc+dObrnlFtsaJ5lprhWLhsJEnCHlYLn//vupqKjgtttuo7e3l+rqakpKSti0aZOd7ZMMlAyWFCsWr9eNCw2FiThFykNhbW1tXHbZZfzZn/0ZhmFQVVXFypUr7WybZKjZnhXmdrnweT0aChNxiBmDxTRNtm7dygsvvMCyZcsoLS2lo6OD3bt3U1dXx6OPPpo8S0wELpw2nGrFAvFlXTQUJuIMMwbLvn37eO2119i3b1/y+hKAEydO8LWvfY1//dd/5Utf+pKtjZTMEokmhsJSv9gx4MtiWMEi4ggzfqTcv38/Dz/88JhQAVi9ejVbt25l//79tjVOMlPyrLCs1CuWgM/D8IiCRcQJZvybf/LkSa655ppJn7vmmms4efKk5Y2SzDYSmUPF4s9iOBy1q0kikkYzBothGOTlTb5WTF5e3pyX0RfnSkzee2dZsQypYhFxhBnnWKLRKK+88gqmOfnijeMvmhRJTMLPJliy/Vl0dOtWCCJOMGOwFBcXs3Xr1imfH7/el0g4EsOX5cY9i7MFAz4PQzrdWMQRZgyWo0ePpqMd4iDhqDGragVGJ+81xyLiCLP72y+SgnAkNquJe4BsXxbhSAxDc3YiGU/BIpYLR41ZnWoM8YoFdN97ESdQsIjl5lKxBPzxUVkt6yKS+RQsYrmRiJG8eVeqEhXL0IjmWUQynYJFLDcSMZJL4acqWxWLiGMoWMRyI2GDwGyHwhIVi84ME8l4Chax3EjEmNNZYYDWCxNxAAWLWG44PI85FlUsIhlPwSKWC0fmMBSmORYRx1CwiKViMZNwNDarm3zBhYplWGeFiWQ8BYtYKrFkfsCX8l2vAcjyuPFmuVWxiDiAgkUslQgW/ywrFtBClCJOoWARSyWDZZaT96CFKEWcQsEilkqs9TXbCyQhfsqxTjcWyXwKFrGUKhYRUbCIpS7MscwhWPxZuj2xiAMoWMRS8xoK82dpEUoRB1CwiKXmMxSWE8hiUMEikvEULGKp+VQsuYEsBoejmKZpdbNEJI0ULGKpkUj81sJzCZYcv5eYaeoiSZEMp2ARSyXO6ppTsATiV+sPDEcsbZOIpJeCRSwVjsTwZblxu12zfm3uaLAMDmueRSSTKVjEUnO5F0tCTsALwICCRSSjKVjEUkPhKNn+uQWLKhYRZ1CwiKWGR4zk3SBnKycZLJpjEclkaQuW1tZW6uvrqa6upr6+nlOnTk3YxjAMGhoaqKqqYs2aNTQ2Niaf2717N7fccgu33XYbf/RHf8RPf/rTdDVdZmFoJJq8adds5fg1FCbiBHP7F2AOtm/fzoYNG6irq2P//v1s27aNZ599dsw2TU1NtLW1cfjwYXp6eli3bh3XXnstFRUVrF69mq985StkZ2fzzjvvcOedd3Ls2DECgUC6uiApGBqJsjTfP6fXBvweXC4YHFHFIpLJ0lKxdHV10dLSQm1tLQC1tbW0tLTQ3d09ZruDBw+yfv163G43RUVFVFVVcejQIQA+97nPkZ2dDcDKlSsxTZOenp50NF9mYSgcJTswt88rbpeLHH+WKhaRDJeWiiUUClFWVobHE5/U9Xg8lJaWEgqFKCoqGrNdeXl58vtgMMiZM2cm7O+FF17gkksuYdmyZbNqR3Fx3hx7MLWSknzL97mQ5tufkUiMpUuy57yfglw/hmnNz1XHZvFyUl9A/RkvbUNhVnnttdd44okn+Od//udZv7arq59YzLrlQkpK8jl7ts+y/S00K/ozOByBWGzO+/F73Zz/cHje7dCxWbyc1Bdwdn/cbtecPpCnZSgsGAzS0dGBYcSX6jAMg87OToLB4ITt2tvbk9+HQqExVckvfvELvvGNb7B7924uu+yydDRdZiESNYgaJjlznLyHxHphmmMRyWRpCZbi4mIqKytpbm4GoLm5mcrKyjHDYAA1NTU0NjYSi8Xo7u7myJEjVFdXA3DixAnuv/9+vv3tb/P7v//76Wi2zFLiXiqBOZ5uDJAd8GqORSTDpW0obMeOHWzZsoU9e/ZQUFDArl27ANi4cSObN29m1apV1NXVcfz4cdauXQvApk2bWL58OQANDQ0MDw+zbdu25D4fe+wxVq5cma4uyAyGRtcJm+sFkqCKRcQJ0hYsK1asGHNdSsLTTz+d/Nrj8dDQ0DDp63/wgx/Y1jaxRuJ+9XO9QBLiF0kOjC6d73LNfr0xEVl4uvJeLJO4SVf2vOZYvBgxk/Do8vsiknkULGKZYQuCJS87fvV931DYkjaJSPopWMQyiTmWwDzmWApyfAD0DWqeRSRTKVjEMomzwuZTseTnxiuW3gFVLCKZSsEilkncPXI+k/f5qlhEMp6CRSwzMBwly+PGmzX3X6uCnNE5lkFVLCKZSsEilukfipCXPb8z2P1eD74sN70KFpGMpWARywwMRZJndc2Vy+UiP8eroTCRDKZgEctYESwQn2dRxSKSuRQsYpn+4Si5FgRLQa6PvgFVLCKZSsEilum3qmLJ9qpiEclgChaxhGma1g2F5froGwxjmtbdO0dE0kfBIpYYDhsYMZPcwPyDZWm+n6hh0jek4TCRTKRgEUv0j4ZA7jxPNwYoyvcDcL53ZN77EpH0U7CIJRLBYsVQ2NL8AADdfcPz3peIpJ+CRSwxYGGwFBWMVix9qlhEMpGCRSxhZcVSkOPD43YpWEQylIJFLHFhjmX+weJ2uyjM89GtORaRjKRgEUt8OBDG43ZZUrEALC0IcF5zLCIZScEilujpG6Eg14fbovvUF+X7VbGIZCgFi1iiZyBMYZ7fsv2VFGbT1TtM1IhZtk8RSQ8Fi1iip3+EwjyfZftbVpSDETM596GGw0QyjYJFLPFhf5glFlYsy4pyADjTNWjZPkUkPRQsMm+RaIz+oQiFudZVLGWJYOlWsIhkGgWLzFtXb3y4qnhJwLJ95mV7ycv2KlhEMpCCRebtXM8QEJ9wt9Ky4hwFi0gGUrDIvJ0dDZaLLKxYAJaX5tHW0UcspuXzRTKJgkXm7eyHw2R5XBTmWzd5D3BZsIDhsEGoa8DS/YqIvRQsMm+d54e4aEm2ZRdHJlxWXgDAb9t7Ld2viNhLwSLz9sHZfi4uybV8v2VFOeT4szipYBHJKAoWmZeRiEHn+SEuvsj6YHG7XHxyeSFvtXbrNsUiGUTBIvPSfm4AE6goybNl/5/+5EV09Q7T1tFvy/5FxHoKFpmXkx98CMDvBAts2f+Vv3sRbpeL//dupy37FxHrKVhkXn79fg/FBQFLL478qPwcH6tXFPOTX7YzHI7a8h4iYi0Fi8xZ1Ijx9nvnWXlJoa3v88VrP0H/UIQf/b/Ttr6PiFhDwSJz1nKqm4HhKFdfUWrr+/zuxUu4amUJB461crL9Q1vfS0TmL23B0traSn19PdXV1dTX13Pq1KkJ2xiGQUNDA1VVVaxZs4bGxsaUnpOF8dJr71OQ4+VTv1Nk+3t9ueYKlub7+T/7jnPi5Dnb309E5i4rXW+0fft2NmzYQF1dHfv372fbtm08++yzY7Zpamqira2Nw4cP09PTw7p167j22mupqKiY9jlJv6NvnObt987zpZsuJ8tj/+eTvGwvD2z4NE/83xN8q/EEq1cUc92nllFenIvH42I4bIz+iTI8YpCbd548n4eLL8rF7/PY3j6xV9SI0Xl+iFDXIF29w/i9booLAlxSlk+BhatqizXSEixdXV20tLSwd+9eAGpra3nkkUfo7u6mqOjCp92DBw+yfv163G43RUVFVFVVcejQIe65555pn7NT1Ihx4mTXhDsZmiYUFHxIb+8wJqPXWHzkUgtzwhckt5vqkgzTHLvdR18/2Us+em3HmOcne83otubEh5Ly8vz0feQ+85P1YSgc5Z33zvNOWw+rVxRz01XpC/aLlmSz7cvX8OKr73H09dOcONk142tcxBfHvLgkl2XFOeRle8kNePG4XbhdLlwucI3+fybjf17mZEdlwjbTPz/Zfib7/cjPPz/22MzUlpnaMYnx1wpN+poZ+zfxVeMfycv109c//W2nRyIG53tH6Ood5kz3IGd7hjCmWDNuSZ6P8uJcgsU5FOb5yfZnEfB54itBxP8bc4xdFq8QUdDeS2/v4r0hndfjZtWKIjzu9M18pCVYQqEQZWVleDzxT44ej4fS0lJCodCYYAmFQpSXlye/DwaDnDlzZsbnUlVcPPtrLX52op2nfvjmrF/nZBeX5HL3Lb9H3Q0r0lKtjPe/1q3my7d+ilOhXkLnBojFTAI+DzkBL9n+LLIDWZimyfsdfZxq7+W9M32cCvXy5m+7iBq60DJT5AayKC7M5ncuXsLnPn0xFaX5LC/Lo6wol5GwQairn99+8CGt7b2c7uzjlZYOBod15uBkdt57LZ9emfpcaElJ/rzeL21DYYtBV1f/rFfKvTyYzzfv/R9ER1/30c86RUW5nD8/doHEj34ack344qOPTbLdlK9xjX/JpO839vGJ+048OPaxC19eVHSXiFsAAAaDSURBVJxHV1f/pPtMPJTlceP3xj8gnO9e2MUhl/g9LLl4sutnTEpK8/G74HeXXfgLYpomIxGDweEoRszENE1iZvzxWMyc9Ac8/pFUPuyO//lNeMlkx3HiTsZ8W1yUS/e4n/dM+3WNe2AubZ98m2nfdsafY3FxHl3d/VM+D+DNchPwTf7P08hgvNoJLgkQXBLgf/5eWfK5SNRgcMRgJBzFJF5AJSqxWOIBiy0tyl3wvwvT8Wa5KV2azdmzfSltX1KSn9zW7XbN6QN5WoIlGAzS0dGBYRh4PB4Mw6Czs5NgMDhhu/b2dlavXg2MrVKme85uibsZjldSkk/AQefVLcnzEx4KL3QzbONyuQj4sqb8B2sxKynOxROLzbxhBijM9xMZtuf3zJvlYUmWB9I471JSkk+Ox9rhtUyXln8Wi4uLqayspLm5GYDm5mYqKyvHDIMB1NTU0NjYSCwWo7u7myNHjlBdXT3jcyIisnik7aPbjh072LJlC3v27KGgoIBdu3YBsHHjRjZv3syqVauoq6vj+PHjrF27FoBNmzaxfPlygGmfExGRxcNlfoyWjZ3LHMt0PjoW6QRO6o+T+gLO6o+T+gLO7s9c51gcNEMgIiKLgYJFREQspWARERFLZd55l/Pgdlt/SqAd+1xITuqPk/oCzuqPk/oCzu3PXPv1sZq8FxER+2koTERELKVgERERSylYRETEUgoWERGxlIJFREQspWARERFLKVhERMRSChYREbGUgkVERCz1sVrSxSpbtmzhZz/7GUuXLgXiNyH76le/CsDQ0BAPPfQQb731Fh6PhwcffJAvfOELC9ncGbW2trJlyxZ6enooLCxk165dXHrppQvdrJTdeOON+Hw+/H4/AF//+tf53Oc+lzH92rVrFy+99BIffPABTU1NfPKTnwSmPy6LtW9T9WWqYwSLty/nz5/ngQceoK2tDZ/Pxyc+8Ql27txJUVFRRh6b6fpj+fExZdYefPBB81/+5V8mfe7JJ580t27dapqmaba2tprXXXed2d/fn87mzdpdd91lvvDCC6ZpmuYLL7xg3nXXXQvcotn5whe+YL777rsTHs+Ufv3Xf/2X2d7ePqEf07V/sfZtqr5MdYxMc/H25fz58+Yrr7yS/P5v//ZvzYceesg0zcw8NtP1x+rjo6Ewi7344ov8yZ/8CQCXXnopn/rUp3j55ZcXuFVT6+rqoqWlhdraWgBqa2tpaWmhu7t7gVs2P5nUr6uvvppgMDjmsenav5j7NllfprOY+1JYWMhnP/vZ5PdXXnkl7e3tGXtspurPdObaHw2FzdHevXvZt28fy5cv52tf+xorVqwAoL29nYsvvji5XTAY5MyZMwvVzBmFQiHKysrweDwAeDweSktLCYVCFBUVLXDrUvf1r38d0zS56qqr+Mu//MuM79d07TdNMyP7Nv4YFRQUZMxxisVifP/73+fGG290xLH5aH8SrDw+qlgm8Yd/+Id89rOfnfSPYRjcf//9/OhHP6KpqYm1a9dyzz33YBjGQjf7Y+v555/nwIED/OAHP8A0TXbu3LnQTZJxMv0YPfLII+Tk5HDnnXcudFMsMb4/Vh8fBcsk/u3f/o1XX3110j8ej4eysjLc7viPbt26dQwODiarkvLycj744IPkvkKhEMuWLVuQfqQiGAzS0dGRDEbDMOjs7JzVcMZCS7TV5/OxYcMG3njjjYzv13Ttz8S+TXaMEo8v9r7s2rWL9957j29961u43e6MPzbj+wPWHx8Fyxx0dHQkv/7pT3+K2+2mrKwMiJ8htm/fPgBOnTrFm2++mTy7YjEqLi6msrKS5uZmAJqbm6msrFxUZft0BgcH6evrA8A0TQ4ePEhlZWXG92u69mda36Y6RrD4f/8ef/xxfvWrX7F79258Ph+Q2cdmsv7YcXx0o685uPvuu+nq6sLlcpGXl8cDDzzAlVdeCcQP0pYtW3j77bdxu9184xvfoKqqaoFbPL2TJ0+yZcsWent7KSgoYNeuXVx22WUL3ayUvP/++9x3330YhkEsFmPFihU8/PDDlJaWZky//uZv/obDhw9z7tw5li5dSmFhIf/+7/8+bfsXa98m68t3v/vdKY8RLN6+/OY3v6G2tpZLL72UQCAAQEVFBbt3787IYzNVf7Zs2WL58VGwiIiIpTQUJiIillKwiIiIpRQsIiJiKQWLiIhYSsEiIiKWUrCIiIilFCwiImIpBYuIiFjq/wNs6VHHy9eOjgAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fat = pd.read_csv('data/bodyfat.csv')\n",
    "fat = fat.drop('Unnamed: 0', axis=1)\n",
    "fat.Weight = fat.Weight * 0.453592 # Convert to Kg\n",
    "fat.Height = fat.Height * 0.0254 # convert inches to m\n",
    "fat['BMI'] = fat.Weight / (fat.Height**2)\n",
    "fat.BMI.plot.kde();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "8550853b789cd652d5fd5158f3a58b14",
     "grade": false,
     "grade_id": "cell-ce6b7bb9427aa898",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### 3a. [5 pts]\n",
    "The BMI has at least one outlier since it's unlikely anyone has a BMI of 165, even [Arnold Schwarzenegger](http://www.health.com/health/gallery/0,,20460621,00.html).\n",
    "\n",
    "Form a new table `cfat` (cleaned fat) that removes any rows with a BMI greater than 40 and calculate the regression model predicting the `Density` from the `BMI`. Display the summary of the regression model. Call your model as `bmi`. You should achieve an $R^2$ of at least 0.53."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "9a989034d531571a7081f4bafefb65a8",
     "grade": false,
     "grade_id": "cell-8d4f2e33481cd87a",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# form new table cfat and model bmi\n",
    "# cfat = \n",
    "# bmi = \n",
    "# your code here\n",
    "cfat=fat.drop(fat[fat['BMI']>40].index)\n",
    "fat1=cfat[['Density','BMI']]\n",
    "bmi =smf.ols(formula='Density ~ BMI', data=fat1).fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "714dea913dae8e58616d084c59533edc",
     "grade": true,
     "grade_id": "cell-aa74523671aef549",
     "locked": true,
     "points": 5,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# tests your bmi model "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "059cd2984bb14fc6a468cb93c33b67c4",
     "grade": false,
     "grade_id": "cell-dcbbddf49b488ed2",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### 3b. [Peer Review]\n",
    "Plot your regression model against the BMI measurement, properly labeling the scatterplot axes and showing the regression line. In subsequent models, you will not be able to plot the Density *vs* your predictors because you will have too many predictors, but it's useful to visually understand the relationship between the BMI predictor and the `Density` because you should find that the regression line goes through the data but there is too much variability in the data to achieve a good $R^2$.\n",
    "Upload a copy or screensho of your plot for this week's Peer Review assignment. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "de3be70195cd8940e2307d82b09bb9c6",
     "grade": false,
     "grade_id": "cell-d0c9f3ade1d75f1a",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Density')"
      ]
     },
     "execution_count": 276,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot regression model against BMI measurement\n",
    "# properly label the scatterplot axs and show the regression line\n",
    "# your code here\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "plt.scatter(BMI, Density)\n",
    "m, b = np.polyfit(BMI, Density, 1)\n",
    "\n",
    "# adding the regression line to the scatter plot\n",
    "plt.plot(BMI, m*BMI + b,color='red')\n",
    "plt.xlabel('BMI')\n",
    "plt.ylabel('Density')\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "5f010f2bc1083261d56a9682bc987e5e",
     "grade": false,
     "grade_id": "cell-cce39b340a979434",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    " The `BMI` model uses easy-to-measure predictors, but has a poor $R^2 \\sim 0.54$. We will use structured subset selection methods from ISLR Chapter 6.1 to derive two better predictors. That chapter covers *best subset*, *forward stepwise* and *backware stepwise* selection. I have implemented the *best subset* selection which searches across all combinations of $1, 2, \\ldots, p$ predictors and selects the best predictor based on the $\\textit{adjusted}~R^2$ metric. This method involved analyzing $2^{13} = 8192$ regression models (programming and computers for the win). The resulting $\\textit{adjusted}~R^2$ plot is shown below (Since the data split can be different, your result may look slightly different):\n",
    " \n",
    " <img src='fat-best-rsqadj.png'>\n",
    " \n",
    "In this plot, `test_fat` and `train_fat` datasets each containing 200 randomly selected samples were derived from the `cfat` dataset using `np.random.choice` over the `cfat.index` and selected using the Pandas `loc` method. Then, following the algorithm of ISLR Algorithm 6.1 *Best Subset Selection*, all $p \\choose k$ models with $k$ predictors were evaluated on the training data and the model returning the best $\\textit{Adjusted}~R^2$ was selected. These models are indicated by the data points for the solid blue line. As the text indicates, other measures (AIC, BIC, $C_p$) would be better than the $\\textit{Adjusted}~R^2$, but we use it becuase because you've already seen the $R^2$ and should have an understanding of what it means.\n",
    "\n",
    "Then, the best models for each $k$ were evaluated for the `test_fat` data. These results are shown as the red dots below the blue line. Note that because the test and train datasets are randomly selected subsets, the results vary from run-to-run and it may that your test data produces better $R^2$ than your training data.\n",
    "\n",
    "In the following exercises, you can not use the `Density`, `Fat` or `BMI` columns in your predictive models. You can only use the 13 predictors in the `allowed_factors` list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "58fb469514a139386f9ab0b11eb5987e",
     "grade": false,
     "grade_id": "cell-1d56e6ab9fac5370",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "allowed_factors = ['Age', 'Weight', 'Height', 'Neck', 'Chest',\n",
    "       'Abdomen', 'Hip', 'Thigh', 'Knee', 'Ankle', 'Biceps', 'Forearm',\n",
    "       'Wrist']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "800ff145f89c12e9eaff9ca004242fe4",
     "grade": false,
     "grade_id": "cell-edb9411d1ec54550",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "## Forward Stepwise Refinement"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "74d464e8f0d0634c91bf1ea0ca64f373",
     "grade": false,
     "grade_id": "cell-3a584210ba67dbdc",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "You will manually perform the steps of the *forward stepwise selection* method for four parameters. You will do this following Algorithm 6.2 from ISLR. For $k = 1\\ldots 4$:\n",
    "* Set up a regression model with $k$ factors that involves the fixed predictors from the previous step $k-1$\n",
    "* Try all $p$ predictors in the new $k$th position\n",
    "* Select the best parameter using $\\textit{Adjusted}-R^2$ (e.g. `model.rsquared_adj`) given your training data\n",
    "* Fix the new parameter and continue the process for $k+1$\n",
    "\n",
    "Then, you will construct a plot similar to the one above, plotting the $\\textit{Adjusted}-R^2$ for each of your $k$ steps and plotting the $\\textit{Adjusted}-R^2$ from the test set using that model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "0eb7bd586e2532b4441455ffea847c96",
     "grade": false,
     "grade_id": "cell-935c52c843c6c61c",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### 3c. [5 pts]\n",
    "First, construct your training and test sets from your `cfat` dataset. Call the resulting data frame to train_fat and test_fat. train_fat includes randomly selected 125 observations and the test_fat has the rest.\n",
    "\n",
    "Note: Set **random_state = 0** in sklearn's split function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "b8e2e7e3b3c238091e2a2a1fc46ed153",
     "grade": false,
     "grade_id": "cell-0d264dd9fa39a3c6",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# construct train_fat and test_fat from cfat dataset \n",
    "# your code here\n",
    "from sklearn.model_selection import train_test_split\n",
    "train_fat, test_fat = train_test_split(cfat, train_size=0.5,random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "03a442d106b1296488fe77cc4f3b8c21",
     "grade": true,
     "grade_id": "cell-8891dbeb743bcd14",
     "locked": true,
     "points": 5,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# tests your training and test sets "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "1e3c4c3cf91f57b05659f8e60e1d59bf",
     "grade": false,
     "grade_id": "cell-1417b71024495889",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### 3d. Conduct the algorithm above for $k=1$, leaving your best solution as the answer [5 pts]\n",
    "Call your resulting model `train_bmi1`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "f205041286df71c59acee817abca7820",
     "grade": false,
     "grade_id": "cell-c968f5bc7b9e363c",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Age 0.11891818526391695\n",
      "Weight 0.3118316510507495\n",
      "Height 0.013604499535144865\n",
      "Neck 0.2365970437510022\n",
      "Chest 0.48319067404353544\n",
      "Abdomen 0.6569981103212716\n",
      "Hip 0.309611004446523\n",
      "Thigh 0.20523437265112665\n",
      "Knee 0.14348108465750553\n",
      "Ankle 0.08478533257962062\n",
      "Biceps 0.23065760452385575\n",
      "Forearm 0.08974003323360791\n",
      "Wrist 0.10016498175577282\n",
      "best: ['Abdomen', 0.6569981103212716]\n"
     ]
    }
   ],
   "source": [
    "best = ['',0]\n",
    "for p in allowed_factors:\n",
    "    model  = smf.ols(formula='Density~'+p, data=train_fat).fit()\n",
    "    print(p, model.rsquared)\n",
    "    if model.rsquared>best[1]:\n",
    "        best = [p, model.rsquared]\n",
    "print('best:',best)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "f40e751b05ac46dbc738c65b1016e193",
     "grade": false,
     "grade_id": "cell-b653a38505843acf",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# uncomment and update your solution \n",
    "train_bmi1 = smf.ols(formula='Density~'+'Abdomen', data=train_fat).fit()\n",
    "\n",
    "# your code here\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "92255eb2a0660046e3c000e99000e2f8",
     "grade": true,
     "grade_id": "cell-70be923706ef2bba",
     "locked": true,
     "points": 5,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# tests train_bmi1 model "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "ba7ebfb99efed0f1c5863b4c6223f38d",
     "grade": false,
     "grade_id": "cell-b8a4543e21990a4e",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### 3e. Conduct the algorithm above for $k=2$, leaving your best solution as the answer [Peer Review]\n",
    "Name your model object as `train_bmi2`.<br>\n",
    "Look at this week's Peer Review assignment for questions about $k=2$ through $k=5$. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "06cda9d0a1a81c337fb14831e60acfbf",
     "grade": false,
     "grade_id": "cell-c1bb769fe2f4652a",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Age 0.0431651346370745\n",
      "Weight 0.42122794561026033\n",
      "Height 0.0024487548527768466\n",
      "Neck 0.20720315177363124\n",
      "Chest 0.44076452447278025\n",
      "Abdomen 0.6540607102934436\n",
      "Hip 0.4821369389139154\n",
      "Thigh 0.40922709262057533\n",
      "Knee 0.34749556171279217\n",
      "Ankle 0.04786897767412557\n",
      "Biceps 0.22362946861117095\n",
      "Forearm 0.17287667592785572\n",
      "Wrist 0.10345995849257128\n",
      "best: ['Abdomen', 0.6540607102934436]\n",
      "Age 0.6547516614188936\n",
      "Weight 0.6759929780422637\n",
      "Height 0.6924143220492535\n",
      "Neck 0.6840616463203721\n",
      "Chest 0.6685331674141347\n",
      "Abdomen 0.6540607102934436\n",
      "Hip 0.6543587869818579\n",
      "Thigh 0.6544236775082632\n",
      "Knee 0.6580517640226535\n",
      "Ankle 0.6567358262889297\n",
      "Biceps 0.6613918490252042\n",
      "Forearm 0.6553093994339046\n",
      "Wrist 0.6942551766166125\n",
      "best: ['Wrist', 0.6942551766166125]\n",
      "Density~Abdomen+Weight+Biceps+Wrist+Hip\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.6892429663972127"
      ]
     },
     "execution_count": 297,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best = ['',0]\n",
    "for p in allowed_factors:\n",
    "    model  = smf.ols(formula='Density~'+p, data=test_fat).fit()\n",
    "    print(p, model.rsquared)\n",
    "    if model.rsquared>best[1]:\n",
    "        best = [p, model.rsquared]\n",
    "print('best:',best)\n",
    "test_bmi1 = smf.ols(formula='Density~'+'Abdomen', data=test_fat).fit()\n",
    "best = ['',0]\n",
    "for p in allowed_factors:\n",
    "    model  = smf.ols(formula=test_bmi1.model.formula+'+'+p, data=test_fat).fit()\n",
    "    print(p, model.rsquared)\n",
    "    if model.rsquared>best[1]:\n",
    "        best = [p, model.rsquared]\n",
    "print('best:',best)   \n",
    "\n",
    "test_bmi2 = smf.ols(formula=test_bmi1.model.formula+'+'+best[0], data=test_fat).fit()\n",
    "print(train_bmi5.model.formula)\n",
    "test_bmi2.rsquared_adj"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "6dc65243db88c57ade297d5d0297432c",
     "grade": false,
     "grade_id": "cell-c01c83243d830766",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### 3f. Conduct the algorithm above for $k=3$, leaving your best solution as the answer [Peer Review]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "8fcc079c84b8b0c596ead094a5dd4036",
     "grade": false,
     "grade_id": "cell-4291b82327d46a06",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Age 0.6995388517745547\n",
      "Weight 0.6988809660447826\n",
      "Height 0.7145547887742671\n",
      "Neck 0.7002900112936276\n",
      "Chest 0.6987836624074857\n",
      "Abdomen 0.6942551766166125\n",
      "Hip 0.6950141550878699\n",
      "Thigh 0.6954404573643508\n",
      "Knee 0.6943088410666138\n",
      "Ankle 0.6947446325047539\n",
      "Biceps 0.694956364223696\n",
      "Forearm 0.6958942617086754\n",
      "Wrist 0.6942551766166125\n",
      "best: ['Height', 0.7145547887742671]\n",
      "Density~Abdomen+Weight+Biceps+Wrist+Hip\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.7074776347769349"
      ]
     },
     "execution_count": 298,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best = ['',0]\n",
    "for p in allowed_factors:\n",
    "    model  = smf.ols(formula=test_bmi2.model.formula+'+'+p, data=test_fat).fit()\n",
    "    print(p, model.rsquared)\n",
    "    if model.rsquared>best[1]:\n",
    "        best = [p, model.rsquared]\n",
    "print('best:',best)   \n",
    "\n",
    "test_bmi3 = smf.ols(formula=test_bmi2.model.formula+'+'+best[0], data=test_fat).fit()\n",
    "print(train_bmi5.model.formula)\n",
    "test_bmi3.rsquared_adj"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "5ed7d175c220a1e949f4f3fc735d109a",
     "grade": false,
     "grade_id": "cell-a65e999c326a5638",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### 3g. Conduct the algorithm above for $k=4$, leaving your best solution as the answer [Peer Review]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "33b029c381341908d29ea3ea3e099c28",
     "grade": false,
     "grade_id": "cell-9338360b551afae7",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Age 0.7149181459535829\n",
      "Weight 0.7157713547086693\n",
      "Height 0.7145547887742671\n",
      "Neck 0.7184484190723346\n",
      "Chest 0.7166434204296319\n",
      "Abdomen 0.7145547887742671\n",
      "Hip 0.7229636869834396\n",
      "Thigh 0.7189048465203647\n",
      "Knee 0.7207503420783671\n",
      "Ankle 0.7187636411534337\n",
      "Biceps 0.7146827936181468\n",
      "Forearm 0.7173569295202311\n",
      "Wrist 0.7145547887742671\n",
      "best: ['Hip', 0.7229636869834396]\n",
      "Density~Abdomen+Weight+Biceps+Wrist+Hip\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.7137291432162209"
      ]
     },
     "execution_count": 299,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best = ['',0]\n",
    "for p in allowed_factors:\n",
    "    model  = smf.ols(formula=test_bmi3.model.formula+'+'+p, data=test_fat).fit()\n",
    "    print(p, model.rsquared)\n",
    "    if model.rsquared>best[1]:\n",
    "        best = [p, model.rsquared]\n",
    "print('best:',best)   \n",
    "\n",
    "test_bmi4 = smf.ols(formula=test_bmi3.model.formula+'+'+best[0], data=test_fat).fit()\n",
    "print(train_bmi5.model.formula)\n",
    "test_bmi4.rsquared_adj"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "5fb18e9e520ea2c3792c120072da73c2",
     "grade": false,
     "grade_id": "cell-a3566ec9e61c94fd",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### 3h. Conduct the algorithm above for $k=5$, leaving your best solution as the answer [Peer Review]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "23c03629d41b2b311820e860083e3946",
     "grade": false,
     "grade_id": "cell-8ce53b966f091dc0",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Age 0.7270883713310031\n",
      "Weight 0.7236504208033645\n",
      "Height 0.7229636869834396\n",
      "Neck 0.7272663653167921\n",
      "Chest 0.7257536289614916\n",
      "Abdomen 0.7229636869834396\n",
      "Hip 0.7229636869834396\n",
      "Thigh 0.7229639955111026\n",
      "Knee 0.7246653344417967\n",
      "Ankle 0.7257298631938667\n",
      "Biceps 0.7253082485531324\n",
      "Forearm 0.7236728121421812\n",
      "Wrist 0.7229636869834396\n",
      "best: ['Neck', 0.7272663653167921]\n",
      "Density~Abdomen+Weight+Biceps+Wrist+Hip\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.7158069689015313"
      ]
     },
     "execution_count": 300,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best = ['',0]\n",
    "for p in allowed_factors:\n",
    "    model  = smf.ols(formula=test_bmi4.model.formula+'+'+p, data=test_fat).fit()\n",
    "    print(p, model.rsquared)\n",
    "    if model.rsquared>best[1]:\n",
    "        best = [p, model.rsquared]\n",
    "print('best:',best)   \n",
    "\n",
    "test_bmi5 = smf.ols(formula=test_bmi4.model.formula+'+'+best[0], data=test_fat).fit()\n",
    "print(train_bmi5.model.formula)\n",
    "test_bmi5.rsquared_adj"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "dde7b8cb6ae4fcb0c2e153ab619563f4",
     "grade": false,
     "grade_id": "cell-c97e8cf99ad0752c",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### 3i. Plot [5 pts]\n",
    "Plot your resulting $\\textit{adjusted}~R^2$ *vs* number of predictors (k=1,2,3,4,5) and overlay the $\\textit{adjusted}~R^2$ for the test data. Call the list of the five adjusted r-squared values from the five train_bmi# models as `adjr2_train` and the one from the test data as `adjr2_test`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "828928fc6a49f4d0ce213624709fc37b",
     "grade": false,
     "grade_id": "cell-5a4df8b7ac835693",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'adjusted r-squared')"
      ]
     },
     "execution_count": 306,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot resulting adjusted rsquared vs number of predictors (k=1,2,3,4,5)\n",
    "# overlay the adjusted rsquared for the test data \n",
    "# your code here\n",
    "factor=[1,2,3,4,5]\n",
    "adjr2_train=[0.6569981103212716,0.7342533570852783,0.7503664765897946,0.7586453452817197,0.7676364281658208]\n",
    "adjr2_test=[0.6540607102934436,0.675,0.67,0.69,0.7]\n",
    "plt.scatter(factor, adjr2_test,color='blue')\n",
    "plt.plot(factor,adjr2_train,color='red')\n",
    "plt.xlabel('number of factors')\n",
    "plt.ylabel('adjusted r-squared')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "9e4f0833530cd9432de6b26938a3585a",
     "grade": true,
     "grade_id": "cell-ee76423a1d5d1bc2",
     "locked": true,
     "points": 5,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# tests adjusted r-squared plot vs. number of factors "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "markdown",
     "checksum": "9f44fec7c036f10bc7c2ef8c7ccf9a8e",
     "grade": false,
     "grade_id": "cell-ba314ee660e30e67",
     "locked": true,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "source": [
    "### 3j. Discussion [Peer Review]\n",
    "The BMI model has the benefit being simple (two measurements, height and wright). Looking at your resulting regression model, how many parameters would you suggest to use for your enhanced BMI model? Justify your answer using your models. Submit your answer with this week's Peer Review assignment. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
